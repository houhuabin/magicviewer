/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MappingProgress.java
 *
 * Created on 2009-7-8, 21:20:17
 */
package Magic.Units.Gui.Task;

import Magic.WinMain.MagicFrame;
import Magic.Units.File.Parameter.ForEverStatic;
import Magic.Units.File.Parameter.Log;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DecimalFormat;
import java.util.Vector;
import javax.swing.JPanel;
import javax.swing.Timer;
import utils.SystemUtil;
import utils.swing.SwingUtil;

/**
 *
 * @author Huabin Hou
 */
public class NewProgress extends javax.swing.JDialog implements Runnable, ActionListener {

    private int PROGRESS = 0;
    private ProgressPanel progressPanel;
    private static DecimalFormat d = new DecimalFormat("0.00");
    private TaskBase task;
    private Timer timer;
    private Exception exception = null;

    /** Creates new form NewOkCancelDialog */
    public NewProgress(java.awt.Frame parent) {
        super(parent, false);
//        this.swingWorker = swingWorker;
    }

    public NewProgress(String title, String message, TaskBase task) {
        super(MagicFrame.instance, title, true);

        if (task.getNames() != null && task.getNames().size() > 1) {
            progressPanel = new ProgressPanel(task.getNames());
            this.add(progressPanel, BorderLayout.NORTH);
            this.setSize(this.getWidth(), this.getHeight() + 100);
        }

        this.task = task;
        //System.out.println(task);
        new Thread(this).start();
        initComponents();
        this.setMessage(message);
        /* ç½‘233333333333333333 progressbar.setMinimum(0);
        progressbar.setMaximum((int) task.getMaximum());
        progressbar.setStringPainted(!task.isIndeterminate());
        progressbar.setIndeterminate(task.isIndeterminate());*/
        SwingUtil.setLocation(this);


    }

    public void next() {
        if (progressPanel != null) {
            progressPanel.next();
        }
        reSet(false, 1);
    }

    public int getProgress() {
        return PROGRESS;
    }

    public void setProgress(int value) {
        PROGRESS = value;
        // System.out.println(value);
        if (progressbar != null) {

            progressbar.setValue((int) PROGRESS);
        }
    }

    public void setMaximum(int max) {
        task.setMax(max);
    }

    public void setMessage(String m) {
        if (m != null) {
            messageArea.setText(m);
        }
    }

    public void appendMessage(String m) {
        int len = messageArea.getText().length() + 1;
        messageArea.append("\n" + m);
        messageArea.setCaretPosition(len);
    }

    public void reSet(boolean indeterminate, int max) {

        if (progressbar != null) {
            progressbar.setIndeterminate(indeterminate);
            progressbar.setStringPainted(!indeterminate);

        }
        if (max < 1) {
            max = 1;
        }
        this.setMaximum(max);
        if (!indeterminate) {
            this.setProgress(0);
        }
    }

    public Exception getException() {
        return this.exception;
    }

    public void setIndeterminate(boolean value) {
        progressbar.setIndeterminate(value);
    }

    public void setStringPainted(boolean value) {
        progressbar.setStringPainted(value);
    }

    public void setReturnStatus(int value) {
        taskStatus = value;
    }

    /** @return the return status of this dialog - one of RET_OK or RET_CANCEL */
    public int getReturnStatus() {
        return taskStatus;
    }

    public void doClose(int retStatus) {
        task.cancelTask();
        taskStatus = retStatus;
        setVisible(false);
        dispose();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        progressbar = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        messageArea = new javax.swing.JTextArea();
        backButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 0, 12))); // NOI18N

        progressbar.setFont(new java.awt.Font("Times New Roman", 0, 12));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(progressbar, javax.swing.GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(progressbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jScrollPane1.setAutoscrolls(true);

        messageArea.setColumns(20);
        messageArea.setRows(5);
        messageArea.setText(" *** message ***");
        jScrollPane1.setViewportView(messageArea);

        backButton.setFont(new java.awt.Font("Times New Roman", 0, 12));
        backButton.setText("Cancel");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 619, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(271, 271, 271)
                        .addComponent(backButton)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(backButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        doClose(ForEverStatic.RET_CANCEL);
}//GEN-LAST:event_backButtonActionPerformed

    public void startTask() {
        //System.out.println("startTask");
        new Thread(this).start();
    }

    public void actionPerformed(ActionEvent e) {
        if (this.task == null) {
            this.timer.stop();
            setVisible(false);
            return;
        }

        try {
            progressbar.setIndeterminate(this.task.isIndeterminate());
            progressbar.setStringPainted(!(this.task.isIndeterminate()));

            int val = this.task.getValue();
            int max = this.task.getMaximum();
            // System.out.println("val:"+val +" max:"+max);

            progressbar.setMaximum(max);
            progressbar.setValue(val);
            //  progressbar.set
            String message = this.task.getMessage();
            if (message != null) {
                this.setMessage(message);
            }
        } catch (Exception ex) {
        }
    }

    public void run() {
        // System.out.println("Task run");
        Thread.currentThread().setName("ProgressDialog-ITrackableJob");
        if (!(SystemUtil.isMac())) {
            // createCancelTimer();
        }
        this.timer = new Timer(100, this);
        this.timer.start();
        try {
            // System.out.println("Task:" + task.getTaskCount()+this.taskStatus);

            for (int i = 0; (i < this.task.getTaskCount()) && (this.taskStatus == ForEverStatic.RUNNING); ++i) {
                //if (i > 0);
                //{
                // System.out.println("next..");
                next();
                // }

                //   System.out.println(i+" Task:" + this.task.getTaskCount());
                this.task.runTask(i);
            }
        } catch (Exception e) {
            e.printStackTrace();

            this.exception = e;
            this.taskStatus = ForEverStatic.RET_ERR;
        }
        this.taskStatus = ForEverStatic.RET_OK;
        this.task = null;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {/*
        java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
        MappingProgress dialog = new MappingProgress(new javax.swing.JFrame(), true);
        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
        public void windowClosing(java.awt.event.WindowEvent e) {
        System.exit(0);
        }
        });
        dialog.setVisible(true);
        }
        });*/

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea messageArea;
    private javax.swing.JProgressBar progressbar;
    // End of variables declaration//GEN-END:variables
    private int taskStatus = ForEverStatic.RUNNING;
}
