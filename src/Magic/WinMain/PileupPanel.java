/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ColumnPanel.java
 *
 * Created on 2009-5-19, 6:41:13
 */
package Magic.WinMain;

import Magic.Units.Gui.PopTip;
import Magic.Units.IO.SeqData;
import Magic.Units.Piece.Piece;
import Magic.Units.Gui.InfoBase;
import Magic.Units.File.Parameter.Log;
import Magic.Units.Gui.Windows.AlnMagicPanel;
import Magic.Units.Gui.Windows.MagicPanel;
import Magic.Units.Track.Track;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import utils.SamViewUtil;
import utils.SystemUtil;

/**
 *
 * @author Huabin Hou
 */
public class PileupPanel extends AlnMagicPanel {

    public int coordinate = 0;
    //PopTip id_popup = new PopTip();

    /** Creates new form ColumnPanel */
    public PileupPanel(MagicFrame magicFrame) {

        initComponents();
        this.magicFrame = magicFrame;
        partCenter = new PipleupPartCenter(this);
        parts.add(partCenter);
        // parts.add(poptip);
        this.addMouseListener(partCenter);
        this.addMouseMotionListener(partCenter);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    public void setData() {

        seqData = MagicFrame.instance.seqData;
        if (seqData == null) {
            ifPaint = false;
            return;
        }
        tracks = new Track[1];
        tracks[0] = seqData.seqPanelDatas.get(seqPanelIndex).pileupEntries;
        setWidthAndHeight();
        ifPaint = true;
    }

    public void setWidthAndHeight() {
        setMaxWidth(Log.instance().global.alignmentWindowLen * Log.instance().alignPara.baseWidth);
        this.setSize(new Dimension(getMaxWidth(), this.getHeight()));
    }

    @Override
    public Piece getFocusedPiece(int x, int y) {
        if (ifPaint == false || x < 0 || tracks[0] == null || tracks[0].currentPieces == null) {
            return null;
        }

        for (Piece piece : tracks[0].currentPieces) {

            if (piece.contains(x + dx, 0)) {

                return piece;
            }
        }
        return null;
    }

    @Override
    public void paintComponent(Graphics g1) {
// SystemUtil.printCurrentTime("paint start");
        super.paintComponent(g1);
        paintImplement((Graphics2D) g1);
        g1.dispose();
       //  SystemUtil.printCurrentTime("paint end");
       // System.out.println("");

    }

    @Override
    public void paintBuffer(Graphics2D g) {
        g.setFont(Log.instance().alignPara.DNA_FONT);

        paintViewMode1(g);
        updateBuffer = false;
    }

    public void paintViewMode1(Graphics2D g) {
        tracks[0].paint(g);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(246, 244, 236));
        setMaximumSize(new java.awt.Dimension(32767, 60));
        setMinimumSize(new java.awt.Dimension(0, 60));
        setPreferredSize(new java.awt.Dimension(400, 60));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
}
