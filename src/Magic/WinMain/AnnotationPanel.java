/*
 * EggPanel.java
 *
 * Created on September 25, 2008, 12:14 PM
 */
package Magic.WinMain;

import Magic.Units.Gui.Windows.AnnoPartCenter;
import Magic.Units.Main.IntPoint2D;
import Magic.Units.Track.Track;
import Magic.IO.DataRep;
import Magic.Units.File.Parameter.Log;
import Magic.Units.File.Parameter.StringRep;
import Magic.Units.Gui.Windows.AnnoMagicPanel;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.util.Vector;

/**
 *
 * @author Huabin Hou
 */
public class AnnotationPanel extends AnnoMagicPanel {

    // public int SEGMENT = 10;
    public int BASE;
     //public IntPoint2D focused_segment = new IntPoint2D(-1, -1, -1);
    // DataSource dataSource;
    public int highlight_index = -1;
    public Font tagFont = new Font("Helvetica", Font.PLAIN, 16);
    private final byte[] lock = new byte[0]; // 特殊的instance变量

    public AnnotationPanel(MagicFrame a) {
        magicFrame = a;
        initComponents();

        partCenter = new AnnoPartCenter(this);
        parts.add(partCenter);
       // parts.add(poptip);
        this.addMouseListener(partCenter);
        this.addMouseMotionListener(partCenter);
    }

    public void loadData(DataRep c) {
        ifPaint = false;
        tracks = c.tracks;

        setMaxWidth(Log.instance().reference.currentContigLen >> Log.instance().annoPara.ZOOM);

        if (tracks == null || tracks.length == 0) {
            ifPaint = true;

            return;
        }
        setSite();
        ifPaint = true;
    }

    public void clear() {
        clearData();
        ifPaint = false;

    }

    public void clearData() {
        //  blocks_in_window.clear();
        if (tracks == null) {
            return;
        }     

        //focused_segment.setLocation(-1, -1, -1);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();

        jLabel2.setText("jLabel2");

        setBackground(new java.awt.Color(244, 245, 250));
        setLayout(null);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables

    public void translate(int x, int y) {
        if (tracks == null) {
            return;
        }
        dx = x;
       // System.out.println(""+dx+"-----------------");
        dy = y;
        updateBuffer=true;
        repaint();
    }

   



    public void setSite() {
        if (tracks == null) {
            return;
        }
        int vertical = 10;

        for (int i = 0; i < tracks.length; i++) {

            if (i == 0) {
                vertical += tracks[0].trackSet.trackHeight / 2;
            } else {
                vertical += tracks[i - 1].trackSet.trackHeight / 2 + tracks[i].trackSet.trackHeight / 2;
            }
            tracks[i].middleY = vertical;
            // //System.out.println(dtrunk.tracks[i].SITE +" ********  dtrunk.tracks[i].SITE  ");
        }
        if (tracks.length > 0) {
            BASE = vertical + tracks[tracks.length - 1].trackSet.trackHeight / 2 + 2;
        }

        setMaxHeight(BASE);
        //  this.setSize(new Dimension(MAX_WIDTH, MAX_HEIGHT));

    }

    @Override
    public void paintComponent(Graphics g1) {
        super.paintComponent(g1);
        paintImplement((Graphics2D) g1);
    }

    

    public void paintBuffer(Graphics2D g) {      
    
        paintBackground(g);
        g.setColor(Color.PINK);

        if (magicFrame.gotoPosion > 0) {
            //  g.drawLine(trackFrame.posionCente >> Log.instance().linearPara.ZOOM, 0, trackFrame.posionCente >> Log.instance().linearPara.ZOOM, MAX_HEIGHT);
        }
        paintViewMode1(g);
        for (int i = 0; i < tracks.length; i++) {
            tracks[i].paitTrack(g, dx, dx + this.getWidth());
        }
        updateBuffer = false;
    }

    public void paintBackground(Graphics2D g) {
        if (tracks == null) {
            return;
        }
        if (Log.instance().annoPara.VIEW_MODE.equals(StringRep.NONOVERLAP)) {
            for (int i = 0; i < tracks.length; i++) {
                g.setColor(tracks[i].backGround);
                g.fillRect(0, tracks[i].middleY - tracks[i].trackSet.trackHeight / 2, dx + this.getWidth(), tracks[i].trackSet.trackHeight);
            }
        }
    }

    public void paintViewMode1(Graphics2D g) {
        synchronized (lock) {
            for (Track track : tracks) {
                track.paintInit();
                track.paint(g);
            }
        }
    }
}
