/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AxiPanel.java
 *
 * Created on Jan 2, 2010, 10:03:52 AM
 */
package Magic.WinMain;

import Magic.IO.DataRep;
import Magic.Units.File.Parameter.Log;
import Magic.Units.Gui.Axi;
import Magic.Units.Gui.Windows.MagicPanel;
import Magic.Units.Gui.Slider;
import Magic.Units.Gui.Task.SwingWorker;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;

/**
 *
 * @author lenovo
 */
public class AxiPanel extends MagicPanel {

    public Font AXIS_FONT = new Font("Monospace", Font.PLAIN, 16);
    public Axi axi = new Axi(AXIS_FONT, getFontMetrics(AXIS_FONT), Color.black);
    public Slider slider;
    public int BASE = 20;

    /** Creates new form AxiPanel */
    public AxiPanel(MagicFrame a) {
        magicFrame = a;
        initComponents();
    }

    public void loadData() {
        ifPaint = true;
        setMaxWidth(Log.instance().reference.currentContigLen >> Log.instance().annoPara.ZOOM);
        setMaxHeight(this.getHeight() + 20);
        updateSlider();
    }

    public void sliderMoveXAdd(int xadd) {

        //System.out.println(xadd+"   xadd-------------------start      "+start);
        //  System.out.println();
        slider.posionX = slider.posionX + xadd;
        vlidateSliderPosion();
        //System.out.println(x2+"----------------slider.posionX---------------------------------"+slider.posionX);
    }

    public void vlidateSliderPosion() {
        if (slider.posionX < 0) {
            slider.posionX = 0;
        } else if (slider.posionX > magicFrame.horiz1.getWidth() - slider.totalWidth) {
            slider.posionX = magicFrame.horiz1.getWidth() - slider.totalWidth;
        }
        slider.posionX = Math.min(slider.posionX, (Log.instance().reference.currentContigLen >> Log.instance().annoPara.ZOOM) - slider.totalWidth + 1);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(244, 245, 250));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 31, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void processSlider(int x, int y) {
        if (slider == null) {
            return;
        }

        if (slider.contains(x, y)) {
            slider.isMouseIn = true;
            setCursor(new Cursor(Cursor.HAND_CURSOR));


        } else {
            slider.isMouseIn = false;
            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));

        }
        repaint();
    }
    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged

        //System.out.println("drag:::::::::::::::::::");
        if (!ifPaint || true) {
            return;
        }

        final int x = evt.getX();
        int moveLen = x - start.x;
        start.x = x;
        if (slider != null) {
            sliderMoveXAdd(moveLen);
            magicFrame.setPosionsByAnnoPosion();
//            magicFrame.gotoPosionAndReload();
            magicFrame.reloadAligment();
        }
        final SwingWorker worker = new SwingWorker() {

            public Object construct() {

                return null;
            }

            @Override
            public void finished() {
            }
        };
        worker.start();
        magicFrame.alignAssemblyPanel.reflash();
        repaint();
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseDragged

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        int x = evt.getX();
        int y = evt.getY();
        processSlider(x, y);        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseMoved

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed


        requestFocus();
        int x = evt.getX();
        int y = evt.getY();
        //  System.out.println(x+"==============start===============");
        start.setLocation(x, y);

        // TODO add your handling code here:
    }//GEN-LAST:event_formMousePressed

    @Override
    public void paintComponent(Graphics g1) {
        super.paintComponent(g1);

        paintImplement((Graphics2D) g1);
    }

    public void paintImplement(Graphics2D g) {
        if (ifPaint == false) {
            return;
        }


       // g.translate(-dx, -dy);
        setBackground(Color.white);

        g.setColor(Color.PINK);

        paintAxis(g);
        paintSlider(g);


    }

    public void paintAxis(Graphics2D g) {
        // g.setColor(Color.green);
        // g.drawRect(dx, BASE, dx + this.getWidth(), 40);
        g.setColor(Color.black);
        int draw_end = ( this.getWidth());
        ////System.out.println(dx+"   min======================================max   "+draw_end+"  SEGMENT  "+SEGMENT);
        if (Log.instance().reference == null) {
            return;
        }
        if (draw_end > (Log.instance().reference.currentContigLen >> Log.instance().annoPara.ZOOM)) {
            draw_end = (Log.instance().reference.currentContigLen >> Log.instance().annoPara.ZOOM);
            axi.drawAnno(g, 0, BASE, draw_end, BASE, dx, Log.instance().reference.currentContigLen, 100, Log.instance().annoPara.ZOOM);
        } else {
            axi.drawAnno(g, 0, BASE, draw_end, BASE, dx, draw_end, 100, Log.instance().annoPara.ZOOM);
        }
    }

    public void updateSlider() {
        int inner = magicFrame.horiz2.getWidth() / Log.instance().alignPara.baseWidth >> Log.instance().annoPara.ZOOM;
        int total = Log.instance().global.alignmentWindowLen >> Log.instance().annoPara.ZOOM;
        int innerPosionX = magicFrame.horiz2.getValue() / Log.instance().alignPara.baseWidth >> Log.instance().annoPara.ZOOM;
        int posion = 0;
        if (slider != null) {
            if (magicFrame.gotoPosion >> Log.instance().annoPara.ZOOM < (magicFrame.horiz1.getWidth() / 2)) {
                // posion = magicFrame.gotoPosion >> Log.instance().annoPara.ZOOM;
                posion = slider.posionX;
            } else {
                posion = slider.posionX;
            }
        }
        // System.out.println( magicFrame.gotoPosion+"-----------------posion------------------------");
        slider = new Slider(total, inner, posion, innerPosionX);
    }

    public void paintSlider(Graphics2D g) {
        slider.rectBorder.x1 = Math.max(0, slider.posionX);
        slider.rectBorder.x2 = slider.rectBorder.x1 + slider.totalWidth;
        slider.rectBorder.y1 = BASE - 2;
        slider.rectBorder.y2 = slider.rectBorder.y1 + slider.height;
        g.drawImage(slider.getImage(),  Math.max(0, slider.posionX), slider.rectBorder.y1, null);
        g.setColor(Color.red);
        // System.out.println(MagicFrame.instance.annoAssemblyPanel.selectX+"=============selectX===================");
        int xsite = (MagicFrame.instance.annoAssemblyPanel.selectX - MagicFrame.instance.annoPosionStart) >> Log.instance().annoPara.ZOOM;
        g.drawLine(xsite, 0, xsite, getMaxHeight());
        // g.drawLine(MagicFrame.instance.annoAssemblyPanel.selectX>>Log.instance().annoPara.ZOOM, 0, MagicFrame.instance.annoAssemblyPanel.selectX>>Log.instance().annoPara.ZOOM, getMaxHeight());
    }

    @Override
    public void paintBuffer(Graphics2D g) {
        // throw new UnsupportedOperationException("Not supported yet.");
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
