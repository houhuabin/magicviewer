/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NewBAMJDialog.java
 *
 * Created on 2009-9-15, 21:05:58
 */
package Magic.WinMain;

import Magic.Methods.FormatFactory;
import Magic.Units.File.FileFormat;
import Magic.Units.Main.SeeEggMethods;
import Magic.Units.Gui.Task.SwingWorker;
import Magic.Units.IO.ViewerLog;
import Magic.Units.File.Parameter.Log;
import Magic.Units.File.Parameter.StringRep;
import Magic.Units.Alignment.ProjectProperty;
import Magic.Units.File.FastaFile;
import Magic.Units.File.Parameter.ForEverStatic;
import java.io.File;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import utils.FileUtil;

import utils.SamViewUtil;
import utils.ForMagic;
import utils.swing.SwingUtil;

/**
 *
 * @author Huabin Hou
 */
public class NewBAMJDialog extends javax.swing.JDialog {

    /** Creates new form NewBAMJDialog */
    public NewBAMJDialog(java.awt.Frame parent) {
        super(parent, true);
        this.parent = (MagicFrame) parent;
        this.dataImportBean = Log.instance().projectProperty;
        initComponents();

        setViewMode(Log.instance().global.SimpleMode);
        SwingUtil.setLocation(this);
    }
    private DefaultListModel annoModel = new DefaultListModel();
    private DefaultListModel algnModel = new DefaultListModel();
    MagicFrame parent;
    //public String alignFile;
    // public String outFileFormat;
   // public Vector<String> annoFile = new Vector<String>();
    private int viewMode = Log.instance().global.SimpleMode;
    ProjectProperty dataImportBean;
    //private String refFile = null;

    public int getViewMode() {
        return viewMode;
    }

    public void setViewMode(int mode) {
        this.viewMode = mode;
    }
    // String[] formatArray = {"R A Q x x x L O C P x x x x <bsmap> 1 1", "R A Q x x L S C P x x x <soap> 0 0", "R C P S x x x x x x x x x L A Q <maq> 0 0"};
    //SpinnerModel formatModel = new SpinnerListModel(Arrays.asList(formatArray));
    //FormatBean format = ParseFormat.getFormat("R A Q x x x L O C P x x x x <bsmap> 1 1");
    //ProgressDialog monitor;

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel6 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        refer_field = new javax.swing.JTextField();
        ref_add_button = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        annos_list = new javax.swing.JList();
        remove_button = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        anno_add_button = new javax.swing.JButton();
        display_button = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        readsList = new javax.swing.JList();
        remove_button1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        algn_add_button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Setting Path", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 0, 14))); // NOI18N
        jPanel6.setFont(new java.awt.Font("Times New Roman", 0, 12));

        jLabel3.setText("Reference");

        refer_field.setFont(new java.awt.Font("Times New Roman", 0, 12));
        refer_field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refer_fieldActionPerformed(evt);
            }
        });

        ref_add_button.setFont(new java.awt.Font("Times New Roman", 0, 12));
        ref_add_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/plus.png"))); // NOI18N
        ref_add_button.setMargin(new java.awt.Insets(2, 2, 2, 2));
        ref_add_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ref_add_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(refer_field, javax.swing.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(ref_add_button)
                .addGap(16, 16, 16))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refer_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(64, 64, 64))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ref_add_button)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Annotation File", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 0, 14))); // NOI18N

        annos_list.setFont(new java.awt.Font("Times New Roman", 0, 16));
        annos_list.setModel(annoModel);
        jScrollPane1.setViewportView(annos_list);

        remove_button.setFont(new java.awt.Font("Times New Roman", 0, 16));
        remove_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/remove.png"))); // NOI18N
        remove_button.setMargin(new java.awt.Insets(2, 2, 2, 2));
        remove_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remove_buttonActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 12));

        anno_add_button.setFont(new java.awt.Font("Times New Roman", 0, 12));
        anno_add_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/plus.png"))); // NOI18N
        anno_add_button.setMargin(new java.awt.Insets(0, 4, 0, 4));
        anno_add_button.setMaximumSize(new java.awt.Dimension(29, 29));
        anno_add_button.setMinimumSize(new java.awt.Dimension(29, 29));
        anno_add_button.setPreferredSize(new java.awt.Dimension(29, 29));
        anno_add_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anno_add_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel4))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(anno_add_button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(remove_button)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(anno_add_button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(remove_button))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        display_button.setFont(new java.awt.Font("Times New Roman", 0, 12));
        display_button.setText("Display");
        display_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                display_buttonActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Alignment File", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 0, 14))); // NOI18N

        readsList.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        readsList.setModel(algnModel);
        jScrollPane2.setViewportView(readsList);

        remove_button1.setFont(new java.awt.Font("Times New Roman", 0, 16));
        remove_button1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/remove.png"))); // NOI18N
        remove_button1.setMargin(new java.awt.Insets(2, 2, 2, 2));
        remove_button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remove_button1ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 12));

        algn_add_button.setFont(new java.awt.Font("Times New Roman", 0, 12));
        algn_add_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/plus.png"))); // NOI18N
        algn_add_button.setMargin(new java.awt.Insets(0, 4, 0, 4));
        algn_add_button.setMaximumSize(new java.awt.Dimension(29, 29));
        algn_add_button.setMinimumSize(new java.awt.Dimension(29, 29));
        algn_add_button.setPreferredSize(new java.awt.Dimension(29, 29));
        algn_add_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                algn_add_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel6))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(algn_add_button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(remove_button1)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(algn_add_button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(remove_button1))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addComponent(jLabel6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(259, 259, 259)
                .addComponent(display_button)
                .addContainerGap(298, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(38, 38, 38))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(display_button)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void remove_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remove_buttonActionPerformed
        int[] indices = annos_list.getSelectedIndices();
        if (indices != null) {
            for (int i = indices.length - 1; i >= 0; i--) {
                annoModel.removeElementAt(indices[i]);
                //  model2.removeElementAt(indices[i]);
            }
            annos_list.setSelectedIndex(-1);
        }
}//GEN-LAST:event_remove_buttonActionPerformed

    private boolean check() {
        if (algnModel.size() == 0) {
            JOptionPane.showMessageDialog(this, "Please select alignment file", "Warnning", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if (refer_field.getText().trim().equals("")) {
            JOptionPane.showMessageDialog(this, "Please select reference sequence file", "Warnning", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        return true;
    }

    private ArrayList<String> getReadsFiles() {
        return SwingUtil.getFilesByModel(algnModel);
    }

    private ArrayList<String> getAnnoFiles() {
        return SwingUtil.getFilesByModel(annoModel);
    }

    private void display_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_display_buttonActionPerformed

        if (!check()) {
            return;
        }
        // alignFile = alignment_field.getText();
        Log.instance().step = 4;
        Log.instance().viewMode = viewMode;
        ArrayList<String> readfiles = getReadsFiles();
        ArrayList<String> annofiles = getAnnoFiles();
        String refFile = refer_field.getText().trim();
        Log.instance().reference = new FastaFile(refFile, null);
        Log.instance().reads.setReads(readfiles);
        ViewerLog.setViewerLog(annofiles, Log.instance());
        //FastaFile.generateDicAndIndex(log.reference.refile, monitor);
        SwingWorker worker = new SwingWorker() {

            public Object construct() {

               
                parent.saveLog();
                parent.loadLog(Log.instance());
                return null;
            }

            public void finished() {
                parent.reflash();
            }
        };
        worker.start();
        doClose(ForEverStatic.RET_OK);

    }//GEN-LAST:event_display_buttonActionPerformed

    private void refer_fieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refer_fieldActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_refer_fieldActionPerformed

    private void ref_add_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ref_add_buttonActionPerformed
        //String name = SwingUtil.getOpenFileByChooser(null, new String[]{"fasta|fa"}, parent);
        String name = ForMagic.getReferenceFile(parent);
        if (name == null) {
            return;
        }

        name = treatGBKRef(name);

        ForEverStatic.CURRENT_PATH = new File(name).getParent();
        dataImportBean.workspacePath = new File(name).getParent();
        String path = dataImportBean.workspacePath + ForEverStatic.FILE_SEPARATOR;
        dataImportBean.log_file = path + StringRep.PROJECT + ".log";
        //  projectProperty.PROJECT_FOLDER = path;
        File folder = new File(path);
        folder.mkdirs();


        if (FileFormat.checkByContent(name, StringRep.FASTA)) {
            refer_field.setText(name);
            //  refFile = name;
        } else {
            String fileType = FileFormat.checkFileFormatByContent(name);
            System.out.println(fileType);
            int answerConfirmation = JOptionPane.showConfirmDialog(parent, "Not a fasta format file!", "ERROR", JOptionPane.DEFAULT_OPTION);
            switch (answerConfirmation) {
                case 0:
                case 1:
                    return;
            }
        }
    }//GEN-LAST:event_ref_add_buttonActionPerformed

    private String treatGBKAnno(String file) {
        if (file.toLowerCase().endsWith("gbk")) {
           // parent.monitor = new StepProgress("Auto Convert GBK File", StringRep.START, null);
            //   String fastaFile = FileUtil.getNoTypePart(file) + ".fa";
            String gffFile = FileUtil.getNoTypePart(file) + ".gff";
            // FormatFactory.gbk_embl2Others(StringRep.GBK, file, StringRep.GENOME, fastaFile);
           if( FormatFactory.gbk_embl2Others(StringRep.GBK, file, StringRep.GFF, gffFile)!=ForEverStatic.RET_OK)
           {
              return null;
           }
           // parent.monitor.setVisible(false);
            // annoModel.addElement(gffFile);
            //  System.out.println(gffFile);
            return gffFile;
        }
        return file;
    }

    private String treatGBKRef(String file) {
        if (file.toLowerCase().endsWith("gbk")) {
          //  parent.monitor = new StepProgress("Auto Convert GBK File", StringRep.START, null);
            String fastaFile = FileUtil.getNoTypePart(file) + ".fa";
            String gffFile = FileUtil.getNoTypePart(file) + ".gff";
                if(  FormatFactory.gbk_embl2Others(StringRep.GBK, file, StringRep.GENOME, fastaFile)!=ForEverStatic.RET_OK)
           {
              return null;
           }    if(  FormatFactory.gbk_embl2Others(StringRep.GBK, file, StringRep.GFF, gffFile)!=ForEverStatic.RET_OK)
           {
              return null;
           }
            return fastaFile;
        }
        return file;
    }

    private void anno_add_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anno_add_buttonActionPerformed

        JFileChooser filechooser = new JFileChooser();
        filechooser.setMultiSelectionEnabled(true);
        // //System.out.println(LogBean.getInstance().global.CURRENT_PATH+"  LogBean.getInstance().global.CURRENT_PATH==========================");
        filechooser.setCurrentDirectory(new File(ForEverStatic.CURRENT_PATH));
        int answer = filechooser.showOpenDialog(this);
        switch (answer) {
            case JFileChooser.APPROVE_OPTION:
                break;
            case JFileChooser.CANCEL_OPTION:
                return;
        }
        File[] files = filechooser.getSelectedFiles();
        if (files == null || files.length == 0) {
            return;
        }
        ForEverStatic.CURRENT_PATH = files[0].getParent();
        String unexistFile = "";
        String format = "";
        for (int i = 0; i < files.length; i++) {
            File file = files[i];
            //System.out.println("Add: " + file.getName());
            String name = file.getAbsolutePath();

            try {
                name = file.getCanonicalPath();
            } catch (Exception e) {
                //System.out.println(e.getMessage());
            }
            name = treatGBKAnno(name);
            format = FileFormat.checkFileFormatByContent(name);

            // //System.out.println(format + "   ==========format============");
            if (FileFormat.checkAnnotationFormat(format)) {
                annoModel.addElement(name);

            } else {
                String name1 = file.getName();

                if (SeeEggMethods.checkFileExist(name1)) {
                }
                unexistFile = unexistFile + "\t" + name1;

            }
        }
        if (!unexistFile.equals("")) {
            JOptionPane.showMessageDialog(this, "Not surported  format, please check:\n" + unexistFile, "Warnning", JOptionPane.OK_OPTION);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_anno_add_buttonActionPerformed

    private void remove_button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remove_button1ActionPerformed
        int[] indices = readsList.getSelectedIndices();
        if (indices != null) {
            for (int i = indices.length - 1; i >= 0; i--) {
                algnModel.removeElementAt(indices[i]);
                //  model2.removeElementAt(indices[i]);
            }
            readsList.setSelectedIndex(-1);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_remove_button1ActionPerformed

    private void algn_add_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_algn_add_buttonActionPerformed
        //String name = SwingUtil.getOpenFileByChooser(null, new String[]{"fasta|fa"}, parent);
        String[] files = ForMagic.getAlignmentFiles(parent);
        if (files == null || files.length == 0) {
            return;
        }
        ForEverStatic.CURRENT_PATH = files[0];
        String unexistFile = "";
        String format = "";
        for (int i = 0; i < files.length; i++) {
            String name = files[i];
            format = FileFormat.checkFileFormatByContent(name);
            if (FileFormat.checkSurportedAlignFile(format)) {
                algnModel.addElement(name);
            } else {
                unexistFile = unexistFile + "\t" + name;
            }
        }
        if (!unexistFile.equals("")) {
            JOptionPane.showMessageDialog(this, "Not surported  format, please check:\n" + unexistFile, "Warnning", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_algn_add_buttonActionPerformed

    private void doClose(int retStatus) {
        returnStatus = retStatus;

        if (returnStatus == ForEverStatic.RET_CANCEL) {
        }

        setVisible(false);
        dispose();
    }

    public void setReadFiles(Vector<String> name) {
        for (int i = 0; i < name.size(); i++) {
            annoModel.addElement(name.elementAt(i));
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                NewBAMJDialog dialog = new NewBAMJDialog(new javax.swing.JFrame());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton algn_add_button;
    private javax.swing.JButton anno_add_button;
    private javax.swing.JList annos_list;
    private javax.swing.JButton display_button;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList readsList;
    private javax.swing.JButton ref_add_button;
    private javax.swing.JTextField refer_field;
    private javax.swing.JButton remove_button;
    private javax.swing.JButton remove_button1;
    // End of variables declaration//GEN-END:variables
    private int returnStatus = ForEverStatic.RET_CANCEL;
}
