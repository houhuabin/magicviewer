/*
 * ReadsColorPanel.java
 *
 * Created on October 16, 2008, 11:06 AM
 */
package Magic.Options.Alignment;

import utils.swing.EditorAndRenterer.JPanelEditor;
import utils.swing.EditorAndRenterer.JPanelRenderer;
import Magic.WinMain.MagicFrame;
import Magic.Units.Color.BaseImage;
import Magic.Units.File.Parameter.Log;
import utils.swing.SwingUtil;

;

import Magic.Units.Color.ColorRep;

import java.awt.Color;

import java.awt.Dimension;

import java.lang.reflect.Field;

import java.util.Vector;

import javax.swing.JCheckBox;

import javax.swing.JPanel;

import javax.swing.table.DefaultTableModel;

import utils.ReportInfo;

/**
 *
 * @author Huabin Hou
 */
public class BackGroundColorPanel extends javax.swing.JPanel {

    private MagicFrame trackFrame;
    private String[] base = {"Simple", "High Light"};
    private Color redBirghter = Log.instance().alignPara.HightLight[Log.instance().alignPara.HightLight.length - 1];
    private Color redDarker = Log.instance().alignPara.HightLight[0];
    private Color grayBirghter = Log.instance().alignPara.HightLight[Log.instance().alignPara.HightLight.length - 1];
    private Color grayDarker = Log.instance().alignPara.HightLight[0];

    /** Creates new form ReadsColorPanel */
    public BackGroundColorPanel(MagicFrame parent) {
        trackFrame = parent;
        initComponents();
        if (trackFrame.dataRep != null) {

            initTable();
        }
    }

    public void initTable() {
        try {
            DefaultTableModel dm = (DefaultTableModel) reads_color_table.getModel();
            while (dm.getRowCount() > 0) {
                dm.removeRow(0);
            }

            for (int i = 0; i < base.length; i++) {
                Vector<Object> vector = new Vector<Object>();
                vector.add(base[i]);

                JPanel panelBirghter;
                JPanel panelDarker;

                if (base[i].equals("Simple")) {

                    panelBirghter = SwingUtil.getColorPanel(grayBirghter, "Magic.Options.Alignment.BackGroundColorPanel", "setColor", this);
                    panelDarker = SwingUtil.getColorPanel(grayDarker, "Magic.Options.Alignment.BackGroundColorPanel", "setColor", this);

                } else {

                    panelBirghter = SwingUtil.getColorPanel(redBirghter, "Magic.Options.Alignment.BackGroundColorPanel", "setColor", this);
                    panelDarker = SwingUtil.getColorPanel(redDarker, "Magic.Options.Alignment.BackGroundColorPanel", "setColor", this);

                }

                vector.add(panelBirghter);
                vector.add(panelDarker);
                dm.addRow(vector);
            }

            reads_color_table.getColumn(reads_color_table.getColumnName(1)).setCellRenderer(new JPanelRenderer());
            reads_color_table.getColumn(reads_color_table.getColumnName(1)).setCellEditor(new JPanelEditor(new JCheckBox()));
            reads_color_table.getColumn(reads_color_table.getColumnName(2)).setCellRenderer(new JPanelRenderer());
            reads_color_table.getColumn(reads_color_table.getColumnName(2)).setCellEditor(new JPanelEditor(new JCheckBox()));
        } catch (Exception e) {
            ReportInfo.reportError("", e);
        }
    }

    public void setColor(String selectBase, Color c, Integer columnNum) {

        redBirghter = Log.instance().alignPara.HightLight[Log.instance().alignPara.HightLight.length - 1];
        redDarker = Log.instance().alignPara.HightLight[0];
      //  grayBirghter = Log.instance().alignPara.ReadGrayColor[Log.instance().alignPara.ReadGrayColor.length - 1];
      //  grayDarker = Log.instance().alignPara.ReadGrayColor[0];


        if (selectBase.equals("Simple")) {
            if (columnNum == 1) {
                grayBirghter = c;
            } else {
                grayDarker = c;
            }
          //  Log.instance().alignPara.ReadGrayColor = MoreColors.getArrayColor(grayDarker, grayBirghter, 5);

        } else {
            if (columnNum == 1) {
                redBirghter = c;
            } else {
                redDarker = c;
            }
            Log.instance().alignPara.HightLight = ColorRep.getArrayColor(redDarker, redBirghter, 5);

        }

        BaseImage.reset();
        trackFrame.alignAssemblyPanel.reflash();
   
    }

    public void update(MagicFrame parent) {
        trackFrame = parent;
        initTable();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane4 = new javax.swing.JScrollPane();
        reads_color_table = new javax.swing.JTable();

        setFont(new java.awt.Font("Times New Roman", 0, 12));

        jScrollPane4.setFont(new java.awt.Font("Times New Roman", 0, 12));

        reads_color_table.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        reads_color_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Base", "Brighter Color", "Darker Color"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        reads_color_table.setColumnSelectionAllowed(true);
        reads_color_table.setRowHeight(22);
        reads_color_table.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(reads_color_table);
        reads_color_table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        reads_color_table.getColumnModel().getColumn(0).setResizable(false);
        reads_color_table.getColumnModel().getColumn(0).setPreferredWidth(50);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable reads_color_table;
    // End of variables declaration//GEN-END:variables
}
